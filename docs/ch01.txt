Chapter 01 객체, 설계
소프트웨어 설계와 소프트웨어 유지보수는 실무가 이론보다 앞서 있는 분야이다.
실무는 훌륭한 소프트웨어를 설계하기 위해 필요한 다양한 기법과 도구를 초기부터 성공적으로 적용하고 발전시켜 왔다.

소프트웨어 설계에서 대부분의 설계 원칙과 개념 이론은 실무에서 반복적으로 적용되던 기법들을 이론화한 것들이 대부분이다.
소프트웨어의 규모가 커지면 커질수록 소프트웨어 설계 분야에서 이론이 실무를 추월할 가능성은 희박해 보인다.

소프트웨어 유지보수의 경우 그 격차가 더 심하다.
실무에서는 다양한 규모의 소프트 웨어를 성공적으로 유지보수하고 있지만 소프트웨어 유지보수와 관련된 효과적인 이론이 발표된 적은 거의 없다.
심지어 이론은 소프트웨어 유지 보수에 전혀 관심이 없는 것처럼 보인다.

결론적으로 소프트웨어 설계와 유지보수에 중점을 두려면 이론이 아닌 실무에 초점을 맞추는 것이 효과적이다.

이 책은 훌륭한 객체지향 프로그램을 설계하고 유지보수하는 데 필요한 원칙과 기법을 설며하기 위해 쓰여진 책이다.
설계나 유지보수를 이야기할 때 이론을 중심에 두는 것은 적절하지 않다. 설계 분야에서 실무는 이론을 압도한다.
설계에 관해 설명할 때 가장 유용한 도구는 이론으로 덕지덕지 치장된 개념과 용어가 아니라 코드 그 자체이다.

이 책에서는 객체지향 페러다임을 설명하기 위해 추상적인 개념이나 이론을 앞세우지 않을 것이다.
추상적인 개념과 이론은 훌륭한 코드를 작성하는데 필요한 도구일 뿐이다.
프로그래밍을 통해 개념과 이론을 배우는 것이 개념과 이론을 통해 프로그래밍을 배우는 것보다 더 훌륭한 학습 방법이다.

- 01. 티켓 판매 애플리케이션 구현하기 -
작은 소극장을 경영하고 있다. 소극장의 홍보를 위해 작은 이벤트를 기획했다.
이벤트의 내용은 추첨을 통해 선정된 관람객에게 공연을 무료로 관람할 수 있는 초대장을 발송하는 것이다.
이벤트는 마감됐고 공연 날이 되었다. 이벤트에 당첨된 관람객과 그렇지 못한 관람객이 있다.
이 둘을 다른 방식으로 입장시켜야 한다.

- 이벤트에 당첨된 관람객은 초대장을 티켓으로 교환한 후에 입장할 수 있다.
- 이벤트에 당첨되지 않은 관람객은 티켓을 구매해야만 입장할 수 있다.

따라서 관람객을 입장시키기 전에 이벤트 당첨 여부를 확인해야 하고
이벤트 당첨자가 아닌 경우에는 티켓을 판매한 후에 입장시켜야 한다.

클래스 목록
1) Invitation
이벤트 당첨자에게 발송되는 초대장 클래스이다. 공연을 관람할 수있는 초대일자를 인스턴스 변수로 포함한다.

2) Ticket
공연을 관람하기 원하는 모든 사람들은 티켓을 소지해야한다.

3) Bag
관람객이 가져올 수 있는 소지품은 초대장, 현금, 티켓 세가지뿐이라고 하자.
이벤트 당첨자는 티켓으로 교환할 초대장을 가지고 있다.
이벤트에 당첨되지 않은 관람객은 티켓을 구매할 수 있는 현금을 보유하고 있을 것이다.
따라서 Bag 클래스는 ticket, invitation, amount(현금)을 인스턴스 변수로 포함한다.
또 초대장의 보유 여부, 티켓의 소유 여부, 현금을 증가시키거나 감소시키는 메서드, 초대장을 티켓으로 교환하는 메서드를 구현하고 있다.
이벤트에 당첨된 관람객의 가방 안에는 현금과 초대장이 있지만
이벤트에 당첨되지 않은 관람객의 가방 안에는 초대장이 들어있지 않을 것이다.
따라서 Bag 인스턴스의 상태는 현금과 초대장을 함께 보관하거나 초대장 없이 현금만 보관하는 두 가지 중 하나일 것이다.

4) Audience
관람객은 소지품을 보관하기 위해 가방을 소지할 수 있다.

5) TicketOffice
관람객이 소극장에 입장하기 위해서는 매표소에서 초대장을 티켓으로 교환하거나 구매해야 한다.
따라서 매표소에는 관람객에게 판매할 티켓과 티켓의 판매 금액이 보관돼 있어야 한다.
TicketOffice는 판매하거나 교환해 줄 티켓의 목록(tickets)과 판매금액(amount)을 인스턴스 변수로 포함한다.
또한 판매금액을 더하거나 차감하는 plusAmount와 minusAmount 메서드도 구현돼 있다.

6) TicketSeller
판매원은 매표소에서 초대장을 티켓으로 교환해 주거나 티켓을 판매하는 역할을 수행한다.
TicketSeller 클래스는 자신이 일하는 ticketOffice를 알고 있어야 한다.

7) Theater
위의 클래스들을 조합해서 관람객을 소극장에 입장시키는 로직으로 소극장을 구현한 클래스인 Theater 이다.
Theater 클래스가 관람객을 맞이할 수 있도록 enter 메서드를 구현하였다.

소극장은 먼저 관람객의 가방 안에 초대장이 들어 있는지 확인한다.
만일 초대장이 들어있다면 이벤트에 당첨된 관람객이므로 판매원에게서 받은 티켓을 관람객의 가방 안에 넣어준다.
가방 안에 초대장이 없다면 티켓을 판매해야 한다.
이 경우 소극장은 관람객의 가방에서 티켓 금액만큼을 차감한 후 매표소에 금액을 증가시킨다.
마지막으로 소극장은 관람객의 가방 안에 티켓을 넣어줌으로써 관람객의 입장 절차를 끝낸다.
-> 이 작은 프로그램은 몇 가지 문제점을 가지고 있다.

- 02. 무엇이 문제인가 -
로버트 마틴에 따르면 모든 모듈은 제대로 실행돼야 하고, 변경이 용이해야 하며, 이해하기 쉬워야 한다.
앞의 작성한 프로그램은 관람객들을 입장 시키는데 필요한 기능을 오류 없이 정확하게 수행하고 있지만
변경 용이성과 읽는 사람과의 의사소통이라는 목적은 만족시키지 못한다.

- 예상을 빗나가는 코드
마지막에 Theater 클래스의 enter 메서드가 수행하는 일을 보면
관람객과 판매원이 소극장의 통제를 받는 수동적인 존재라는 점이 문제이다.

우리가 관람객일 때 제 3자인 극장이 가방을 마음대로 열어 돈을 가져가게 만들지 않는다.
우리가 판매원일 때 판매원이 아닌 극장이 티켓을 꺼내 관람객에게서 돈을 받아 적립하도록 놔두지 않는다.

이해 가능한 코드란 그 동작이 우리의 예상에서 크게 벗어나지 않는 코드이다.
위에 구현한 코드들은 우리의 예상을 벗어나는 코드 즉, 현실과 다른 우리의 상식과는 너무나도 다르게 동작하는 코드들이다.
따라서 코드를 읽는 사람과 제대로 의사소통하지 못한다.

또 코드를 이해하기 위해 여러 가지 세부적인 내용들을 한꺼번에 기억하고 있어야 한다는 점이 이 코드를 어렵게 만드는 이유이다.
Theater의 enter 메서드를 다시보면 enter 메서드를 이해하기 위해서는 enter가 의존하는 모든 클래스의 세부사항을 알아야 한다.
너무 많은 세부사항을 다루기 때문에 코드를 작성하는 사람뿐만 아니라 코드를 읽고 이해해야 하는 사람 모두에게 큰 부담을 준다.

- 변경에 취약한 코드
위의 코드는 변경에 취약하는 점이 가장 큰 문제이다.
이것은 객체 사이의 의존성(Dependency)과 관련된 문제다. 의존성은 변경과 관련돼 있다.
의존성은 변경에 대한 영향을 암시한다. 의존성이라는 말 속에는 어떤 객체가 변경될 때
그 객체에게 의존하는 다른 객체도 함께 변경될 수 있다는 사실이 내포돼 있다.

하지만 객체 사이의 의존성을 완전히 없애는 것이 정답은 아니다.
객체지향 설계는 서로 의존하면서 협력하는 객체들의 공동체를 구축하는 것이다.
따라서 애플리케이션의 기능을 구현하는 데 필요한 최소한의 의존성만 유지하고 불필요한 의존성을 제거하는 것이 목표이다.

객체 사이의 의존성이 과한 경우를 가리켜 결합도(coupling)가 높다고 말한다.
반대로 객체들이 합리적인 수준으로 의존할 경우에는 결합도가 낮다고 말한다.
결합도는 의존성과 관련돼 있기 때문에 결합도 역시 변경과 관련이 있다.
두 객체 사이의 결합도가 높으면 높을수록 함께 변경될 확률도 높아지기 때문에 변경하기 어려워진다.
따라서 설계의 목표는 객체 사이의 결합도를 낮춰 변경이 용이한 설계를 만드는 것이다.

- 03. 설계 개선하기 -
위의 코드를 이해하기 어려운 이유는 우리의 직관을 벗어나기 때문이다. 즉, 관람객과 판매원이 자신의 일을 스스로 처리해야 한다.
Theater가 원하는 것은 관람객이 소극장에 입장하는 것뿐이다.
따라서 해결방법은 관람객이 스스로 가방 안의 현금과 초대장을 처리하고 판매원이 스스로 매표소의 티켓과 판매 요금을 다루게 하는 것이다.
다시말해 관람객과 판매원을 자율적인 존재로 만들면 되는 것이다.
이렇게 하면 Theater가 Audience와 TicketSeller에 관해 너무 세세한 부분까지 알지 못하게 되고 문제가 해결된다.

- 자율성을 높이자
개념적이나 물리적으로 객체 내부의 세부적인 사항을 감추는 것을 캡슐화(encapsulation)라고 부른다.
캡슐화의 목적은 변경하기 쉬운 객체를 만드는 것이다.
캡슐화를 통해 객체 내부로의 접근을 제한하면 객체와 객체 사이의 결합도를 낮출 수 있기 때문에 설계를 좀 더 쉽게 변경할 수 있게 된다.

-> 따라서 Theater가 Audience와 TicketSeller를 제외하고 접근하는 것을 막는다. 즉, Bag과 TicketOffice로의 접근을 막는다.
이것을 하는 방법은 Audience와 TicketSeller가 Bag과 TicketOffice를 처리하는 자율적인 존재가 되도록 설계를 변경하는 것이다.

결국 Theater는 오직 TicketSeller의 인터페이스(interface)에만 의존한다.
TicketSeller가 TicketOffice인스턴스를 포함하고 있다는 사실은 구현(implementation)의 영역에 속한다.
객체를 인터페이스와 구현으로 나누고 인터페이스만 공개하는 것은 객체 사이의 결합도를 낮추고
변경하기 쉬운 코드를 작성하기 위해 따라야 하는 가장 기본적인 설계 원칙이다.

Audience에 대해서도 위와 같은 캡슐화를 개선하면 된다.
TicketSeller는 Audience의 getBag를 호출해서 사용하고 있기 때문에 Audience는 자율적인 존재가 아니다.
TicketSeller에서 Bag에 접근하는 모든 로직을 Audience에 buy 메서드를 추가하고 옮기자

- 무엇이 개선됐는가
수정된 Audience와 TicketSeller는 자신이 가지고 있는 소지품을 스스로 관리한다.
이것은 우리의 예상과 정확하게 일치하므로 코드를 읽는 사람과의 의사소통이라는 관점에서 확실히 개선되었다.
더 중요한 점은 Audience나 TicketSeller의 내부 구현을 변경하더라도 Theater를 함께 변경할 필요가 없어졌다.
변경이 내부만으로 제한된다. 따라서 수정된 코드는 변경 용이성의 측면에서도 확실히 개선됐다.

- 어떻게 한 것인가
자기 자신의 문제를 스스로 해결하도록 코드를 변경한 것이다. 그 결과로 코드는 변경이 용이하고 이해 가능하도록 수정됐다.

수정하기 전에는 Theater가 Audience와 TicketSeller의 상세한 내부 구현까지 알고 있어야 했고
따라서 Theater는 Audience와 TicketSeller에 가하게 결합돼 있고 Audience와 TicketSeller의 사소한 변경에도
Theater가 영향을 받을 수 밖에 없다.

수정 후에는 Theater는 Audience나 TicketSeller의 내부에 직접 접근하지 않는다.
우리는 객체의 자율성을 높이는 방향으로 설계를 개선했다.
그 결과 이해하기 쉽고 유연한 설계를 얻을 수 있었다.

- 캡슐화와 응집도
핵심은 객체 내부의 상태를 캡슐화하고 객체 간에 오직 메시지를 통해서만 상호작용하도록 만드는 것이다.
Theater는 TicketSeller의 내부에 대해서는 전혀 알지 못한다.
단지 TicketSeller가 sellTo 메시지를 이해하고 응답할 수 있다는 사실만 알고 있을 뿐이다.
TicketSeller 역시 Audience의 내부에 대해서는 전혀 알지 못한다.
단지 Audience가 buy 메시지에 응답할 수 있고 자신이 원하는 결과를 반환할 것이라는 사실만 알고 있을 뿐이다.

객체의 응집도(cohesion)이 높다는 말은 밀접하게 연관된 작업만 수행하고 연관성 없는 작업은 다른 객체에게
위임하는 것을 말한다. 자신의 데이터를 스스로 처리하는 자율적인 객체를 만들면 결합도를 낮출 수 있을 뿐더러
응집도를 높일 수 있다.
객체의 응집도를 높이는 첫 걸음은 객체가 자신의 데이터를 스스로 처리하는 자율적인 존재여야 한다는 것이다.

- 절차지향과 객체지향
수정하기 전 Theater의 enter 메서드 안에 관람객을 입장시키는 절차를 구현했다.
이 관점에서 enter메서드는 프로세스(process)이고 나머지 객체는 데이터(Data)이다.
이처럼 프로세스와 데이터를 별도의 모듈에 위치시키는 방식을
절차적프로그래밍(Procedural Programming)이라고 부른다.

절차적 프로그래밍은 우리의 직관에 위배되어 코드를 읽는 사람과 원활하게 의사소통하지 못한다.
더 큰 문제는 데이터의 변경으로 인한 영향을 지역적으로 고립시키기 어렵다는 것이다.
그래서 변경이 버그를 부르고 버그에 대한 두려움이 코드를 변경하기 어렵게 만든다.

절차적 프로그래밍이 변경에 취약한 이유는 의존성과 관련이 있다. Theater가 많은 클래스에 의존하고 있기
때문에 의존하는 클래스 중 하나라도 변경이 될 경우 Theater도 함께 변경되어야 하는 것이다.

변경하기 쉬운 설계는 한 번에 하나의 클래스만 변경할 수 있는 설계이다.
절차적 프로그래밍은 프로세스가 필요한 모든 데이터에 의존해야 한다는 근본적인 문제점 때문에 변경에 취약할 수밖에 없다.

객체지향 프로그래밍(Object-Oriented Programming)은
데이터와 프로세스가 동일한 모듈 내부에 위치하도록 프로그래밍하는 방식이다.
훌륭한 객체지향 설계의 핵심은 캡슐화를 이용해 의존성을 적절히 관리함으로써 객체 사이의 결합도를 낮추는 것이다.
객체지향 코드는 자시느이 문제를 스스로 처리하기 때문에 예상을 만족시켜 이해하기 쉽고,
객체 내부의 변경이 객체 외부에 파급되지 않도록 제어할 수 있기 때문에 변경하기가 수월하다.

- 책임의 이동
절차적 프로그래밍과 객체지향 프로그래밍 사이에 근본적인 차이를 만드는 것은 책임의 이동(shift of responsibility)이다.
여기서 책임은 기능을 가리킨다.
절차적 프로그래밍은 작업흐름이 주로 한 곳에 집중되어 있다. 즉, 책임이 한 곳에 집중되어 있는 것이다.
객체지향 프로그래밍은 제어흐름이 객체에 적절하게 분산되어 있다.
다시 말해 하나의 기능을 완성하는 데 필요한 책임이 여러 객체에 걸쳐 분산되어 있는 것이다.

변경 전에는 Theater가 전체적인 작업을 도맡아 처리했지만 변경 후에는 객체가 자신이 맡은 일을 스스로 처리했다.
즉, 몰려있던 책임이 개별 객체로 이동한 것이다. 이것이 바로 책임의 이동이다.
객체는 자신을 스스로 책임진다. 객체지향 애플리케이션은 스스로 책임을 수행하는 자율적인 객체들의 공동체를 구성함으로써 완성된다.

만일 코드에서 데이터와 데이터를 사용하는 프로세스가 별도의 객체에 위치하고 있다면 절차적 프로그래밍 방식을 따르고 있을 확률이 높다.
객체지향 설계의 핵심은 적절한 객체에 적절한 책임을 할당하는 것이다.
객체는 다른 객체와의 협력이라는 문맥 안에서 특정한 역할을 수행하는데 필요한 적절한 책임을 수행해야 한다.
따라서 객체가 어떤 데이터를 가지느냐보다 객체에 어떤 책임을 할당할 것이냐에 초점을 맞춰야 한다.

설계를 어렵게 만드는 것은 의존성이다.
해결 방법은 의존성을 제거함으로써 객체사이의 결합을 낮추는 것이다.
위에서 결합도를 낮추기 위해 선택한 방법은 캡슐화이다.
즉, 불필요한 세부사항을 객체 내부로 캡슐화하여 객체의 자율성을 높이고 응집도를 높였다.
자율적인 객체들이 낮은 결합도와 높은 응집도를 가지고 협력하도록 최소한의 의존성만을 남기는 것이 훌륭한 객체지향 설계이다.

- 더 개선할 수 있다.
Bag을 자율적인 존재로 바꿀 수 있다.
-> Audience를 Bag의 구현이 아닌 인터페이스에만 의존하게 됐다.

TicketOffice 역시 자율적인 존재로 바꿀 수 있다.
-> TicketSeller가 TicketOffice의 구현이 아닌 인터페이스에만 의존하게 됐다.
하지만 이 결과로 변경 전에는 존재하지 않았던 새로운 의존서잉 추가됐다.
즉 결합도가 상승하고 설계의 어려움이 증가한 것이다.
현재시점에서 Audience에 대한 결합도와 TicketOffice의 자율성을 모두 만족시키는 방법을 떠올리기 어려워
Audience에 대한 결합도를 낮추는 것이 더 중요하다는 결론에 도달했다. 즉, 변경을 롤백시켰다.

이 예제를 통해 알 수 있는 것은 다음과 같다.
첫 번째 : 어떤 기능을 설계하는 방법은 한 가지 이상일 수 있다.
두 번째 : 동일한 기능을 한가지 이상의 방법으로 설계할 수 있기 때문에 결국 설계는 트레이드오프의 산물이다.
어떤 경우에도 모든 사람들을 만족시킬 수 있는 설계를 만들 수는 없다.

- 그래, 거짓말이다!
Theater, Bag, TicketOffice는 실세계에서 자율적인 존재가 아니다.
비록 현실에서는 수동적인 존재라고 하더라도 일단 객체지향의 세계에 들어오면 모든 것이 능동적이고 자율적인 존재로 바뀐다.
이처럼 능동적이고 자율적인 존재로 소프트웨어 객체를 설계하는 원칙을 가리쳐 의인화(anthropomorphism)라고 부른다.
훌륭한 객체지향설계란 소프트웨어를 구성하는 모든 객체들이 자율적으로 행동하는 설계를 가리킨다.
그 대상이 비록 실세계에서는 생명이 없는 수동적인 존재라고 하더라도 객체지향의 세계로 넘어오는 순간 살아있는 존재가 된다.

- 04. 객체지향 설계 -

- 설계가 왜 필요한가
설계는 코드를 작성하는 매 순간 코드를 어떻게 배치할 것인지를 결정하는 과정에서 나오므로
설계는 코드 작성의 일부이며 코드를 작성하지 않고서는 검증할 수 없다,

좋은 설계란 무엇인가? 두 가지 요구사항을 만족시켜야 한다.
좋은 설계란 오늘 요구하는 기능을 온전히 수행하면서 내일의 변경을 매끄럽게 수용할 수 있는 설계다.

변경을 수용할 수 있는 설계가 중요한 이유는 요구사항이 항상 변경되기 때문이다.
개발을 시작하는 시점에 구현에 필요한 모든 요구사항을 수집하는 것은 불가능에 가깝다.
모든 요구사항을 수집할 수 있다고 가정하더라도 개발이 진행되는 동안 요구사항은 바뀔 수 밖에 없다.
요구사항의 변경은 필연적으로 코드의 수정을 초래하고 코드 수정은 버그가 발생할 가능성을 높인다.
따라서 변경에 유연하게 대응할 수 있는 코드가 필요하다.

- 객체지향 설계
객체지향 프로그래밍은 의존성을 효율적으로 통제할 수 있는 다양한 방법을 제공함으로써
요구사항 변경에 좀 더 수월하게 대응할 수 있는 가능성을 높여준다.

변경 가능한 코드란 이해하기 쉬운 코드이다.
객체지향 패러다임은 세상을 바라보는 방식대로 코드를 작성할 수 있게 돕는다
객체지향은 객체가 행동하리라는 것을 보장함으로써 코드를 좀 더 쉽게 이해할 수 있게 한다.

하지만 단순히 데이터와 프로세스를 객체라는 덩어리 안으로 밀어 넣었다고 해서
변경하기 쉬운 설계를 얻을 수 있는 것은 아니다.
객체지향의 세계에서 애플리케이션은 객체들 간의 상호작용을 통해 구현되기 때문이고
상호작용은 객체 사이의 주고 받는 메시지로 표현된다.

애플리케이션의 기능을 구현하기 위해 객체들이 협력하는 과정 속에서 객체들은 다른 객체에 의존하게 된다.
훌륭한 객체지향 설계란 협력하는 객체 사이의 의존성을 적절하게 관리하는 설계다.
객체 간의 의존성은 애플리케이션을 수정하기 어렵게 만드는 주범이다.

데이터와 프로세스를 하나의 덩어리로 모으는 것은 객체지향 설계로 가는 첫 걸음일 뿐
진정한 객체지향 설계로 나아가는 길은 객체들 사이의 의존서을 적절하게 조절함으로써
변경에 용이한 설계를 만드는 것이다.
